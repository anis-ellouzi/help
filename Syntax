using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Linq;

class NullCheckInserter
{
    public static void AddNullChecks(SyntaxTree tree)
    {
        var root = tree.GetRoot();
        var methods = root.DescendantNodes()
                          .OfType<MethodDeclarationSyntax>();

        foreach (var method in methods)
        {
            var parameters = method.ParameterList.Parameters;
            if (parameters.Count == 0) continue;

            var checks = parameters.Select(param =>
                SyntaxFactory.ParseStatement($"if ({param.Identifier.Text} == null) throw new ArgumentNullException(nameof({param.Identifier.Text}));\n"));

            var body = method.Body ?? SyntaxFactory.Block();
            var newBody = body.WithStatements(body.Statements.InsertRange(0, checks));
            var newMethod = method.WithBody(newBody);

            Console.WriteLine(newMethod.ToFullString());
        }
    }
}
using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;

class AddMethodComments
{
    public static string AddCommentsToMethods(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Find all method declarations
        var methods = root.DescendantNodes()
                          .OfType<MethodDeclarationSyntax>();

        var updatedRoot = root;

        foreach (var method in methods)
        {
            // Check if the method already has a leading trivia (e.g., comments or documentation)
            if (method.GetLeadingTrivia().Any(t => t.IsKind(SyntaxKind.SingleLineCommentTrivia) ||
                                                   t.IsKind(SyntaxKind.MultiLineCommentTrivia) ||
                                                   t.IsKind(SyntaxKind.DocumentationCommentExteriorTrivia)))
            {
                continue; // Skip if the method already has a comment
            }

            // Create a comment
            var commentTrivia = SyntaxFactory.Comment($"// Method: {method.Identifier.Text}");

            // Add the comment as leading trivia
            var leadingTrivia = method.GetLeadingTrivia()
                                       .Add(SyntaxFactory.Trivia(commentTrivia))
                                       .Add(SyntaxFactory.CarriageReturnLineFeed);

            // Update the method with the new trivia
            var updatedMethod = method.WithLeadingTrivia(leadingTrivia);

            // Replace the method in the syntax tree
            updatedRoot = updatedRoot.ReplaceNode(method, updatedMethod);
        }

        // Format the updated root to apply proper indentation
        updatedRoot = Formatter.Format(updatedRoot, new AdhocWorkspace());

        // Return the updated code as a string
        return updatedRoot.ToFullString();
    }
}
