using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Linq;

class AddNullChecksWithVerification
{
    public static string AddNullChecks(SyntaxTree tree)
    {
        var root = tree.GetRoot();
        var methods = root.DescendantNodes()
                          .OfType<MethodDeclarationSyntax>();

        var updatedRoot = root;

        foreach (var method in methods)
        {
            var parameters = method.ParameterList.Parameters;

            if (parameters.Count == 0 || method.Body == null) continue;

            var existingChecks = method.Body.Statements
                                             .OfType<IfStatementSyntax>()
                                             .Where(ifStmt => ifStmt.Condition is BinaryExpressionSyntax binaryExpr &&
                                                              binaryExpr.IsKind(SyntaxKind.EqualsExpression) &&
                                                              binaryExpr.Left is IdentifierNameSyntax);

            var checkedParams = existingChecks.Select(ifStmt =>
            {
                var binaryExpr = (BinaryExpressionSyntax)ifStmt.Condition;
                return ((IdentifierNameSyntax)binaryExpr.Left).Identifier.Text;
            }).ToHashSet();

            var newChecks = parameters
                .Where(param => !checkedParams.Contains(param.Identifier.Text))
                .Select(param => SyntaxFactory.ParseStatement(
                    $"if ({param.Identifier.Text} == null) throw new ArgumentNullException(nameof({param.Identifier.Text}));\n"));

            if (!newChecks.Any()) continue;

            var newBody = method.Body.WithStatements(method.Body.Statements.InsertRange(0, newChecks));
            var updatedMethod = method.WithBody(newBody);

            updatedRoot = updatedRoot.ReplaceNode(method, updatedMethod);
        }

        return updatedRoot.ToFullString();
    }
}

using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;

class AddXmlComments
{
    public static string AddXmlCommentsToMethods(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Find all method declarations
        var methods = root.DescendantNodes().OfType<MethodDeclarationSyntax>();

        var updatedRoot = root;

        foreach (var method in methods)
        {
            // Check if the method already has XML documentation comments
            if (method.GetLeadingTrivia().Any(t => t.IsKind(SyntaxKind.SingleLineDocumentationCommentTrivia)))
                continue;

            // Generate XML documentation comment
            var xmlComment = GenerateXmlComment(method);

            // Add the comment as leading trivia
            var leadingTrivia = method.GetLeadingTrivia()
                                       .Insert(0, SyntaxFactory.Trivia(xmlComment))
                                       .Add(SyntaxFactory.CarriageReturnLineFeed);

            // Update the method with the new trivia
            var updatedMethod = method.WithLeadingTrivia(leadingTrivia);

            // Replace the method in the syntax tree
            updatedRoot = updatedRoot.ReplaceNode(method, updatedMethod);
        }

        // Format the updated root to apply proper indentation
        updatedRoot = Formatter.Format(updatedRoot, new AdhocWorkspace());

        // Return the updated code as a string
        return updatedRoot.ToFullString();
    }

    private static DocumentationCommentTriviaSyntax GenerateXmlComment(MethodDeclarationSyntax method)
    {
        var summaryText = $"Returns a {method.ReturnType}";

        // Create <summary> element
        var summary = SyntaxFactory.XmlSummaryElement(
            SyntaxFactory.XmlText(" " + summaryText + " ")
        );

        // Create <param> elements
        var paramElements = method.ParameterList.Parameters.Select(param =>
            SyntaxFactory.XmlParamElement(
                SyntaxFactory.IdentifierName(param.Identifier.Text),
                SyntaxFactory.XmlText("")
            )
        );

        // Create <returns> element
        var returns = SyntaxFactory.XmlReturnsElement(
            SyntaxFactory.XmlText("")
        );

        // Combine all elements into a single documentation comment
        return SyntaxFactory.DocumentationComment(
            summary,
            SyntaxFactory.XmlNewLine(Environment.NewLine),
            SyntaxFactory.List(paramElements),
            SyntaxFactory.XmlNewLine(Environment.NewLine),
            returns
        );
    }
}
public static SyntaxTree AddElseBlocks(SyntaxTree tree)
    {
        var root = tree.GetRoot();
        
        // Find all if statements
        var ifStatements = root.DescendantNodes()
                               .OfType<IfStatementSyntax>()
                               .Where(ifStmt => ifStmt.Else == null); // Only if statements without else

        var updatedRoot = root;

        foreach (var ifStatement in ifStatements)
        {
            // Create an empty else block with `ignore();`
            var elseClause = SyntaxFactory.ElseClause(
                SyntaxFactory.Block(
                    SyntaxFactory.ParseStatement("ignore();")
                )
            );

            // Add the else block to the if statement
            var updatedIf = ifStatement.WithElse(elseClause);

            // Replace the old if statement with the updated one
            updatedRoot = updatedRoot.ReplaceNode(ifStatement, updatedIf);
        }

        // Return the updated syntax tree
        return SyntaxFactory.SyntaxTree(updatedRoot);
    }
private static bool ContainsThrowArgumentNullException(IfStatementSyntax ifStmt)
    {
        // Check if the body contains a throw new ArgumentNullException statement
        return ifStmt.Statement is BlockSyntax block && block.Statements
            .OfType<ThrowStatementSyntax>()
            .Any(throwStmt =>
                throwStmt.Expression is ObjectCreationExpressionSyntax creationExpr &&
                creationExpr.Type.ToString() == "ArgumentNullException");
    }
public static SyntaxTree FormatSyntaxTree(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Create a workspace for formatting
        var workspace = new AdhocWorkspace();

        // Format the root node
        var formattedRoot = Formatter.Format(root, workspace);

        // Return a new syntax tree with the formatted root
        return SyntaxFactory.SyntaxTree(formattedRoot);
    }
public static SyntaxTree RemoveUnusedVars(SyntaxTree tree)
    {
        var root = tree.GetRoot();
        
        // Find all variable declarations in method bodies
        var variableDeclarations = root.DescendantNodes()
            .OfType<VariableDeclaratorSyntax>()
            .Where(varDecl => IsUnused(varDecl));

        var updatedRoot = root;

        // Remove the unused variable declarations
        foreach (var varDecl in variableDeclarations)
        {
            updatedRoot = updatedRoot.RemoveNode(varDecl, SyntaxRemoveOptions.KeepNoTrivia);
        }

        // Return the updated syntax tree
        return SyntaxFactory.SyntaxTree(updatedRoot);
    }

    // Check if the variable is unused by looking for its references in the syntax tree
    private static bool IsUnused(VariableDeclaratorSyntax varDecl)
    {
        var references = varDecl.SyntaxTree.GetRoot()
            .DescendantNodes()
            .OfType<IdentifierNameSyntax>()
            .Where(identifier => identifier.Identifier.Text == varDecl.Identifier.Text);

        // A variable is unused if it has no references other than its own declaration
        return !references.Any();
    }
public static SyntaxTree AddIgnoreToEmptyCatchBlocks(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Find all catch blocks
        var catchBlocks = root.DescendantNodes()
                              .OfType<CatchClauseSyntax>()
                              .Where(catchClause => IsEmptyCatchBlock(catchClause));

        var updatedRoot = root;

        foreach (var catchBlock in catchBlocks)
        {
            // Create a new statement calling MyConvet.Ignore()
            var ignoreCallStatement = SyntaxFactory.ExpressionStatement(
                SyntaxFactory.InvocationExpression(
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxFactory.SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("MyConvet"),
                        SyntaxFactory.IdentifierName("Ignore")
                    )
                )
            );

            // Replace the empty catch block with the call to MyConvet.Ignore()
            var updatedCatch = catchBlock.WithBlock(
                SyntaxFactory.Block(ignoreCallStatement)
            );

            // Replace the old catch block with the updated one
            updatedRoot = updatedRoot.ReplaceNode(catchBlock, updatedCatch);
        }

        // Return the updated syntax tree
        return SyntaxFactory.SyntaxTree(updatedRoot);
    }

    // Check if the catch block is empty
private static bool IsEmptyCatchBlock(CatchClauseSyntax catchClause)
    {
        // Check if the catch block has no statements or contains only whitespace/comments
        if (catchClause.Block?.Statements.Count == 0)
        {
            // Check if the block contains only comments or whitespace
            var blockStatements = catchClause.Block.Statements;
            return blockStatements.All(statement => 
                statement is EmptyStatementSyntax || // Empty statement
                statement is CommentSyntax ||       // Comment
                string.IsNullOrWhiteSpace(statement.ToString())); // Whitespace only
        }

        return false;
    }
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;
using System.Globalization;

class AddCultureInfoToStringAndParse
{
    public static SyntaxTree AddCultureInfoToStringAndParseCalls(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Modify ToString() calls without parameters to include CultureInfo.InvariantCulture
        var toStringCalls = root.DescendantNodes()
                                .OfType<InvocationExpressionSyntax>()
                                .Where(invocation => invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
                                                     memberAccess.Name.Identifier.Text == "ToString" &&
                                                     invocation.ArgumentList.Arguments.Count == 0);

        var updatedRoot = root;

        foreach (var toStringCall in toStringCalls)
        {
            var updatedToStringCall = toStringCall.WithArgumentList(
                SyntaxFactory.ArgumentList(
                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                        SyntaxFactory.Argument(
                            SyntaxFactory.ParseExpression("CultureInfo.InvariantCulture")
                        )
                    )
                )
            );

            updatedRoot = updatedRoot.ReplaceNode(toStringCall, updatedToStringCall);
        }

        // Modify Parse calls for primary types and string to include CultureInfo.InvariantCulture
        var parseCalls = root.DescendantNodes()
                             .OfType<InvocationExpressionSyntax>()
                             .Where(invocation => invocation.Expression is MemberAccessExpressionSyntax memberAccess &&
                                                  memberAccess.Name.Identifier.Text == "Parse" &&
                                                  invocation.ArgumentList.Arguments.Count == 1 &&
                                                  invocation.ArgumentList.Arguments[0].Expression is LiteralExpressionSyntax);

        foreach (var parseCall in parseCalls)
        {
            var updatedParseCall = parseCall.WithArgumentList(
                SyntaxFactory.ArgumentList(
                    SyntaxFactory.SeparatedList<ArgumentSyntax>(new[]
                    {
                        parseCall.ArgumentList.Arguments[0],  // Keep the first argument (the value to parse)
                        SyntaxFactory.Argument(
                            SyntaxFactory.ParseExpression("CultureInfo.InvariantCulture")
                        )
                    })
                )
            );

            updatedRoot = updatedRoot.ReplaceNode(parseCall, updatedParseCall);
        }

        // Return the updated syntax tree
        return SyntaxFactory.SyntaxTree(updatedRoot);
    }
}
    public static SyntaxTree RemoveUnusedVarsInsideMethod(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Find all method declarations
        var methodDeclarations = root.DescendantNodes()
                                     .OfType<MethodDeclarationSyntax>();

        var updatedRoot = root;

        foreach (var method in methodDeclarations)
        {
            var methodBody = method.Body;

            if (methodBody != null)
            {
                // Find all variable declarations inside the method body
                var variableDeclarations = methodBody.Statements
                                                     .OfType<LocalDeclarationStatementSyntax>()
                                                     .SelectMany(statement => statement.Declaration.Variables);

                // Check for unused variables and remove them
                foreach (var variable in variableDeclarations.ToList())
                {
                    // Check if the variable is used anywhere in the method body
                    if (!IsVariableUsedInMethod(methodBody, variable))
                    {
                        // Remove the unused variable declaration
                        updatedRoot = updatedRoot.RemoveNode(variable.Parent, SyntaxRemoveOptions.KeepNoTrivia);
                    }
                }
            }
        }

        // Return the updated syntax tree
        return SyntaxFactory.SyntaxTree(updatedRoot);
    }

    // Check if the variable is used in the method body
    private static bool IsVariableUsedInMethod(BlockSyntax methodBody, VariableDeclaratorSyntax variable)
    {
        var variableName = variable.Identifier.Text;

        // Look for the variable in all statements in the method body
        var references = methodBody.DescendantNodes()
                                    .OfType<IdentifierNameSyntax>()
                                    .Where(identifier => identifier.Identifier.Text == variableName);

        return references.Any();
    }
class ManualCodeFormatter : CSharpSyntaxRewriter
{
    // This method overrides the default Visit method for BlockSyntax (like methods and control blocks)
    public override SyntaxNode VisitBlock(BlockSyntax node)
    {
        // Indent the block manually
        var formattedStatements = node.Statements.Select(s => s.WithLeadingTrivia(SyntaxFactory.CarriageReturnLineFeed)).ToList();

        // Return the block with adjusted leading trivia for indentation
        return node.WithStatements(SyntaxFactory.List(formattedStatements));
    }

    // Override other Visit methods as needed for other node types
    public override SyntaxNode VisitMethodDeclaration(MethodDeclarationSyntax node)
    {
        // Format the method declaration manually (e.g., adding a newline between the method signature and body)
        var formattedMethod = base.VisitMethodDeclaration(node) as MethodDeclarationSyntax;

        // Adjust the method signature (you can add custom logic to format method declarations as well)
        return formattedMethod;
    }
}

class CodeFormatter
{
    public static SyntaxTree FormatCodeWithoutNormalizeWhitespace(SyntaxTree tree)
    {
        var root = tree.GetRoot();

        // Create an instance of the custom formatter
        var formatter = new ManualCodeFormatter();

        // Apply manual formatting by visiting the nodes and adjusting them
        var formattedRoot = formatter.Visit(root);

        // Return the formatted syntax tree
        return SyntaxFactory.SyntaxTree(formattedRoot);
    }
}
