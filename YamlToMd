using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

class OpenApiModel
{
    public string Version { get; set; }
    public string Title { get; set; }
    public Dictionary<string, string> Paths { get; set; }
    public Dictionary<string, string> Definitions { get; set; }
    
    public OpenApiModel()
    {
        Paths = new Dictionary<string, string>();
        Definitions = new Dictionary<string, string>();
    }
}

class OpenApiParser
{
    public OpenApiModel Parse(string yamlContent)
    {
        var lines = yamlContent.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries);
        var openApiModel = new OpenApiModel();

        string currentKey = "";
        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();
            if (trimmedLine.StartsWith("openapi:"))
            {
                openApiModel.Version = trimmedLine.Substring(8).Trim();
            }
            else if (trimmedLine.StartsWith("info:"))
            {
                currentKey = "info";
            }
            else if (trimmedLine.StartsWith("title:") && currentKey == "info")
            {
                openApiModel.Title = trimmedLine.Substring(6).Trim();
            }
            else if (trimmedLine.StartsWith("paths:"))
            {
                currentKey = "paths";
            }
            else if (currentKey == "paths" && trimmedLine.Contains(":"))
            {
                var pathData = trimmedLine.Split(new[] { ':' }, 2);
                openApiModel.Paths[pathData[0].Trim()] = pathData[1].Trim();
            }
            else if (trimmedLine.StartsWith("definitions:"))
            {
                currentKey = "definitions";
            }
            else if (currentKey == "definitions" && trimmedLine.Contains(":"))
            {
                var definitionData = trimmedLine.Split(new[] { ':' }, 2);
                openApiModel.Definitions[definitionData[0].Trim()] = definitionData[1].Trim();
            }
        }

        return openApiModel;
    }
}

class MarkdownExporter
{
    public string ExportToMarkdown(OpenApiModel model)
    {
        var sb = new StringBuilder();
        
        sb.AppendLine($"# {model.Title}");
        sb.AppendLine($"OpenAPI Version: {model.Version}");
        
        sb.AppendLine("\n## Paths");
        foreach (var path in model.Paths)
        {
            sb.AppendLine($"- **{path.Key}**: {path.Value}");
        }
        
        sb.AppendLine("\n## Definitions");
        foreach (var definition in model.Definitions)
        {
            sb.AppendLine($"- **{definition.Key}**: {definition.Value}");
        }

        return sb.ToString();
    }
}

