using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

class Program
{
    static async Task Main(string[] args)
    {
        string projectPath = @"path\to\your\project"; // Update with your project path
        var csFiles = Directory.GetFiles(projectPath, "*.cs", SearchOption.AllDirectories);

        foreach (var file in csFiles)
        {
            Console.WriteLine($"Processing file: {file}");
            var code = await File.ReadAllTextAsync(file);
            var updatedCode = ProcessCode(code);

            if (updatedCode != code)
            {
                await File.WriteAllTextAsync(file, updatedCode);
                Console.WriteLine($"File updated: {file}");
            }
        }

        Console.WriteLine("Processing complete.");
    }

    static string ProcessCode(string code)
    {
        var syntaxTree = CSharpSyntaxTree.ParseText(code);
        var root = syntaxTree.GetRoot();

        // Find all assignment expressions
        var assignments = root.DescendantNodes()
            .OfType<AssignmentExpressionSyntax>()
            .Where(IsTargetPropertyAssignment);

        var newRoot = root;

        foreach (var assignment in assignments)
        {
            // Replace the right-hand side with new MyString(...)
            var newRightHandSide = SyntaxFactory.ObjectCreationExpression(
                    SyntaxFactory.IdentifierName("MyString"))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Argument(assignment.Right))));

            var newAssignment = assignment.WithRight(newRightHandSide);
            newRoot = newRoot.ReplaceNode(assignment, newAssignment);
        }

        return newRoot.ToFullString();
    }

    static bool IsTargetPropertyAssignment(AssignmentExpressionSyntax assignment)
    {
        // Check if the left-hand side is the property `x`
        if (assignment.Left is IdentifierNameSyntax identifier)
        {
            return identifier.Identifier.Text == "x";
        }

        if (assignment.Left is MemberAccessExpressionSyntax memberAccess)
        {
            return memberAccess.Name.Identifier.Text == "x";
        }

        return false;
    }
}
